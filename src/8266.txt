#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <EEPROM.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>

// FOR ESP-8266-Node-Mcu 
// Use contents from "01" for corret pin setup

int req = 100;
int timeout = 30;                                 // Maximale Wartezeit für die Verbindung in Sekunden
bool is_server = false;                           // If Device is Aserver or Client
const int ledPin = D5;                            // Der Pin, der anzeigt ob wlan verbunden wird
const char* ssid = "Ampel";                       // Standard-SSID
const char* password = "pass";                    // Standard-Passwort

WiFiClient client;
HTTPClient http;

// Ampel Steuerung
int step = 0;
int last = 0;
const int red = D7;                               // Pin Für die Steuerung des Lichtes: Rot
const int yellow = D5;                            // Pin Für die Steuerung des Lichtes: Gelb
const int green = D6;                             // Pin Für die Steuerung des Lichtes: Grün
const int phase = 50;                            // Die länge der Phase bevor automatisch gewechselt wird

ESP8266WebServer server(80);                      // Webserver Für Server

void switch_to_green() {
   // repräsentiert eine schaltsequenz zu Grün
  Serial.print("Switched to step Green");
  
  
  digitalWrite(red, LOW);
  delay(50);
  digitalWrite(yellow, HIGH);
  delay(250);
  digitalWrite(yellow, LOW);
  delay(250);
  digitalWrite(green, HIGH);
  last = 1;
}

void switch_to_red() {
  // repräsentiert eine schaltsequenz zu Rot
  Serial.print("Switched to step Red");
  digitalWrite(yellow, HIGH);
  delay(500);
  digitalWrite(green, LOW);
  delay(250);
  digitalWrite(yellow, LOW);
  delay(50);
  digitalWrite(red, HIGH);
  last = 2;
}

void createServer() {
  // Erstelle einen Server
  Serial.println("Nun Master-Server...");
  WiFi.softAP("ampel-hs", "ampel-hs");              
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("IP-Adresse: ");
  Serial.println(myIP);
  // Routen für den Serverbetrieb
  server.on("/", HTTP_GET, [](){
    String html = "<html><body>";
  html += "<h1>Ampelstatus</h1>";
  // Ampelstatus abfragen und entsprechenden HTML-Code generieren
  if (last == 1) {
    html += "<p>Ampel ist auf Grün.</p>";
  } else if (last == 2) {
    html += "<p>Ampel ist auf Rot.</p>";
  } else {
    html += "<p>Ampel ist im Übergangszustand.</p>";
  }
  html += "</body></html>";
  server.send(200, "text/html", html);
  });
  // Diese Route gibt die aktuellen Werte von last und step zurück (zum syncroniesieren mit andern)
  server.on("/getparams", HTTP_GET, [](){
    int out = 0;
    if (last == 1) {
      out = 2;
    } else if (last == 2) {
      out = 1;
    } 
    
    String response = "last: " + String(out) + "\nstep: " + String(step);
    server.send(200, "text/plain", response);
    Serial.println("Client requested");
  });
  // starte den Server
  server.begin();
  Serial.println("Server started");
}

void setup() {
  // setze Ample Pins auf output
  pinMode(yellow, OUTPUT);
  pinMode(green, OUTPUT);
  pinMode(red, OUTPUT);
  // Serial 
  Serial.begin(115200);
  // Setup Network
  Serial.print("Verbindung zum Netzwerk: ");
  WiFi.begin("ampel-hs", "ampel-hs");
  // while wifi unconnected and within timeout > wait and retry
  while (WiFi.status() != WL_CONNECTED && timeout > 0) {
    digitalWrite(ledPin, HIGH); 
    delay(300);
    Serial.print(".");
    digitalWrite(ledPin, LOW); 
    delay(700);
    timeout--;
  }

  if (WiFi.status() == WL_CONNECTED) {
    // connected to Network
    Serial.println("\nMit Netzwerk Verbunden.");
    is_server = false;
  
  } else {
    // create Network 
    Serial.println("\nErstelle Netzwerk...");
    is_server = true;
    createServer();
  }

}

void sendHttpRequest() {
  WiFiClient client;
  HTTPClient http;

  Serial.print("[HTTP] begin...\n");
  if (http.begin(client, "http://192.168.4.1/getparams")) {  // HTTP 
    Serial.print("[HTTP] GET...\n");
    // start connection and send HTTP header
    int httpCode = http.GET();

      // httpCode will be negative on error
      if (httpCode > 0) {
        // HTTP header has been send and Server response header has been handled
        Serial.printf("[HTTP] GET... code: %d\n", httpCode);

        // file found at server
        if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
          String payload = http.getString();
          Serial.println(payload);

          // Parse the received data to update 'last' and 'step' variables
          int outLast = 0;
          int outStep = 0;
          if (sscanf(payload.c_str(), "last: %d\nstep: %d", &outLast, &outStep) == 2) {
          // Successfully parsed the data, update the variables
            last = outLast;
            step = outStep;
        }
        }
      } else {
        Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
      }

      http.end();
    } else {
      Serial.printf("[HTTP} Unable to connect\n");
    }
}


void loop() {
  Serial.print("Timing:");
  Serial.println(step);

  // Ampel Schaltung
  if (step >= phase) {
    step = 0;
    if (last == 1) {
      switch_to_red();
    }
    else if (last == 2)
    {
      switch_to_green();
    }
    else{
      digitalWrite(yellow, HIGH);
      delay(100);
      digitalWrite(yellow, LOW);
      digitalWrite(green, HIGH);
      last = 1;
    }
  Serial.print("Umgeschaltet auf: ");
  Serial.println(last);
  } 
    // wenn zum Netzwerk verbunden und nicht server
  if (is_server != true) {
    if (req <= 0) {
      sendHttpRequest();
      req = 76;
    }
    req--;
  }
  else {
    server.handleClient();
  }
  delay(100);
  step ++;
}

